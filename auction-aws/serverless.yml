service: auction-aws

provider:
  name: aws
  runtime: nodejs18.x

  stage: dev
  region: ap-southeast-1
  logs:
    httpApi: true

  httpApi:
    cors: true
    metrics: true #enables detailed metric
    authorizers:
      PrivateRouter:
        type: request
        functionName: AuthPrivate
        identitySource:
          - $request.header.Authorization
      AdminRouter:
        type: request
        functionName: AuthAdmin
        identitySource:
          - $request.header.Authorization

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: 'arn:aws:dynamodb:*:*:*'

    - Effect: 'Allow'
      Action:
        - 's3:GetObject'
        - 's3:PutObject'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - 'my-auction-bucket'
            - '/*'
    # allow for list files on my-auction-bucket
    - Effect: 'Allow'
      Action:
        - 's3:ListBucket'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - 'my-auction-bucket'

plugins:
  # - serverless-plugin-typescript
  - serverless-esbuild
  - serverless-dotenv-plugin

package:
  individually: true

custom:
  esbuild:
    bundle: true
    target: node18
    exclude: []

functions:
  AuthPrivate:
    handler: src/handler/author/private.handler
  AuthAdmin:
    handler: src/handler/author/admin.handler
  RefreshToken:
    handler: src/handler/author/refresh.handler
    events:
      - httpApi:
          path: /user/refresh-token
          method: post
  RefeshStatusAuction:
    handler: src/handler/auction/refresh-status.handler
    events:
      - eventBridge:
          name: event-bridge-refresh-status-auction
          schedule: cron(1 0 * * ? *)
  CreateUser:
    handler: src/handler/user/signup.handler
    events:
      - httpApi:
          path: /user/signup
          method: post

  SignIn:
    handler: src/handler/user/signin.handler
    events:
      - httpApi:
          path: /user/signin
          method: post
  SignInWithProvider:
    handler: src/handler/author/signin-with-provider.handler
    events:
      - httpApi:
          path: /user/signin/provider
          method: post
  Logout:
    handler: src/handler/author/logout.handler
    events:
      - httpApi:
          path: /user/logout
          method: get
  GetUser:
    handler: src/handler/user/get-one.handler
    events:
      - httpApi:
          path: /user
          method: get
          authorizer:
            name: PrivateRouter
  UpdateUser:
    handler: src/handler/user/update.handler
    events:
      - httpApi:
          path: /user
          method: put
          authorizer:
            name: PrivateRouter
  CreateBlog:
    handler: src/handler/blog/create.handler
    events:
      - httpApi:
          path: /blog
          method: post
          authorizer:
            name: PrivateRouter
  GetAllBlog:
    handler: src/handler/blog/get-all.handler
    events:
      - httpApi:
          path: /blog
          method: get
          authorizer:
            name: PrivateRouter
  DeleteBlog:
    handler: src/handler/blog/delete.handler
    events:
      - httpApi:
          path: /blog/{id}
          method: delete
          authorizer:
            name: PrivateRouter
  UpdateBlog:
    handler: src/handler/blog/update.handler
    events:
      - httpApi:
          path: /blog/{id}
          method: put
          authorizer:
            name: PrivateRouter
  GetBlog:
    handler: src/handler/blog/get-one.handler
    events:
      - httpApi:
          path: /blog/{id}
          method: get
          authorizer:
            name: PrivateRouter
  CreateLike:
    handler: src/handler/like/create.handler
    events:
      - httpApi:
          path: /like
          method: post
          authorizer:
            name: PrivateRouter

  DisLike:
    handler: src/handler/like/delete.handler
    events:
      - httpApi:
          path: /dislike
          method: delete
          authorizer:
            name: PrivateRouter

  GetSignedUrl:
    handler: src/handler/s3/get-signed-url.handler
    events:
      - httpApi:
          path: /file
          method: post

  CreateAuction:
    handler: src/handler/auction/create.handler
    events:
      - httpApi:
          path: /auction
          method: post
          authorizer:
            name: PrivateRouter
  UpdateAuction:
    handler: src/handler/auction/update.handler
    events:
      - httpApi:
          path: /auction/{id}
          method: put
          authorizer:
            name: PrivateRouter
  GetAuction:
    handler: src/handler/auction/get-one.handler
    events:
      - httpApi:
          path: /auction/{id}
          method: get
          authorizer:
            name: PrivateRouter
  GetAllAuction:
    handler: src/handler/auction/get-all.handler
    events:
      - httpApi:
          path: /auction
          method: get
          authorizer:
            name: PrivateRouter

  GetAllAuctionClosing:
    handler: src/handler/auction/get-all-closing.handler
    events:
      - httpApi:
          path: /auction/closing
          method: get
          authorizer:
            name: PrivateRouter

  ConfirmAuction:
    handler: src/handler/auction/confirm-status.handler
    events:
      - httpApi:
          path: /auction/confirm/{id}
          method: get
          authorizer:
            name: PrivateRouter

  DeleteAuction:
    handler: src/handler/auction/delete.handler
    events:
      - httpApi:
          path: /auction/{id}
          method: delete
          authorizer:
            name: PrivateRouter
  BidAuction:
    handler: src/handler/auction/bid.handler
    events:
      - httpApi:
          path: /auction/bid/{id}
          method: post
          authorizer:
            name: PrivateRouter
  BuyAuction:
    handler: src/handler/auction/buy.handler
    events:
      - httpApi:
          path: /auction/buy/{id}
          method: post
          authorizer:
            name: PrivateRouter
  CreateCategory:
    handler: src/handler/category/create.handler
    events:
      - httpApi:
          path: /category
          method: post
          authorizer:
            name: PrivateRouter
  GetPaymentForUser:
    handler: src/handler/payment/get-all.handler
    events:
      - httpApi:
          path: /payment
          method: get
          authorizer:
            name: PrivateRouter
  CreateCheckout:
    handler: src/handler/payment/create-checkout.handler
    events:
      - httpApi:
          path: /payment/create-checkout
          method: post
          authorizer:
            name: PrivateRouter
  UpdatePayment:
    handler: src/handler/payment/stripe-webhooks.webhookHandler
    events:
      - httpApi:
          path: /payment/payment-webhooks
          method: post
resources:
  - ${file(resources/dynamodb-resources.yml)}
  # test:
  #   handler: src/handler/user/test.handler
  #   events:
  #     - httpApi:
  #         path: /test/
  #         method: get
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
